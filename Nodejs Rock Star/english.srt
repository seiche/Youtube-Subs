1
00:00:00,100 --> 00:00:06,000
And in conclusion, we have found Apache to be an excellent server for our web applications.

2
00:00:06,100 --> 00:00:07,200
Any questions?

3
00:00:08,000 --> 00:00:12,400
Yes, I have a question. Why didn't you use Nodejs?

4
00:00:12,500 --> 00:00:19,200
Nodejs is an event driven non-blocking IO server that can be used to build high performance web applications.

5
00:00:19,800 --> 00:00:21,000
That is an excellent question.

6
00:00:21,100 --> 00:00:28,500
We evaluated several alternative web servers and concluded that while options like Nodejs are very interesting

7
00:00:28,700 --> 00:00:31,700
Apache meets our needs and has a solid track record.

8
00:00:31,800 --> 00:00:33,600
But it doesn't have performance.

9
00:00:33,700 --> 00:00:40,200
Everybody knows that Apache applications are slow because they use blocking IO and have context switches.

10
00:00:40,300 --> 00:00:47,360
That's a commonly held belief that threaded web servers are somehow less performant or scalable and event based servers.

11
00:00:47,400 --> 00:00:53,300
In fact, if you measure carefully you will find that both models have similar performance characteristics.

12
00:00:53,600 --> 00:00:55,500
Threads don't scale, simple as that.

13
00:00:56,000 --> 00:00:59,500
That may have been true 10 years ago, it's not true today.

14
00:01:00,000 --> 00:01:06,300
Nodejs will run circles around Apache because Apache was built before async was discovered.

15
00:01:07,900 --> 00:01:14,000
This is where I typically stab myself repeatedly in the ears with a fork until I stop hearing you.

16
00:01:14,100 --> 00:01:20,100
I've looked at Node, it uses a single threaded loop that dispatches events to handlers.

17
00:01:20,200 --> 00:01:25,700
It's a proven model that solves some concurrency problems, but at the cost of code complexity.

18
00:01:26,000 --> 00:01:30,800
It gives techies like me the control to ring every last CPU cycle out of our servers.

19
00:01:31,000 --> 00:01:36,200
It must feel empowering to be totally responsible for the performance of your application.

20
00:01:36,400 --> 00:01:41,100
To be always on the look out for blocking operations that should be split into little pieces,

21
00:01:41,200 --> 00:01:44,650
each perfectly tailored to optimize concurrent through-put

22
00:01:44,720 --> 00:01:48,500
all of the complexities of Assembler with the efficiencies of Javascript.

23
00:01:48,600 --> 00:01:50,900
I'm a total speed junky.

24
00:01:51,000 --> 00:01:53,500
Do you know what this reminds me of?

25
00:01:54,000 --> 00:01:55,400
The invention of the transistor?

26
00:01:55,500 --> 00:01:58,600
It reminds me of the invention of threads.

27
00:01:58,800 --> 00:02:02,200
Threading libraries do exactly what you are doing manually.

28
00:02:02,300 --> 00:02:05,150
They break up pieces of code to be executed intermittently.

29
00:02:05,250 --> 00:02:10,300
Switching from instructions that are waiting on IO to instructions that are ready to run.

30
00:02:10,400 --> 00:02:16,400
But your sequential code stays in tact, you nary call sequential code, that's the code you can read.

31
00:02:16,500 --> 00:02:18,200
But it's slow as a dog.

32
00:02:18,600 --> 00:02:23,700
Your async program is like something from a 19th century gothic horror story.

33
00:02:23,800 --> 00:02:29,000
Drunk with your own sense of power, you reassemble pieces of code that were once coherent

34
00:02:29,060 --> 00:02:32,420
stitching them together with event loops and callback functions

35
00:02:32,520 --> 00:02:38,200
until your monster, grotesque and menacing, is ready to be brought to life in a Javascript VM.

36
00:02:38,300 --> 00:02:43,100
You throw the switch and the  hideous creature awakes, rises and lurches forward.

37
00:02:43,200 --> 00:02:48,160
You're simultaneously elated and terrified that something so unnatural could work at all.

38
00:02:48,260 --> 00:02:52,240
When you've realized what you've unleased, the pure immorality of it,

39
00:02:52,340 --> 00:02:56,600
your creation reaches out with its blooded mangled arms and strangles you.

40
00:02:58,100 --> 00:02:59,800
But it's fast as hell.

41
00:03:00,000 --> 00:03:06,200
If you're willing to suffer complex code for performance, why not write an Nginx module in C?

42
00:03:06,800 --> 00:03:11,900
Nodejs is the most bad ass rock star tech to come out since Ruby on Rails.

43
00:03:12,000 --> 00:03:16,200
As much as a I want to be an optimist and look forward to human progress,

44
00:03:16,300 --> 00:03:18,800
people like you stop me dead in my tracks.

45
00:03:18,900 --> 00:03:22,000
You're a fanatic in the church of technology fashion.

46
00:03:22,100 --> 00:03:28,900
I could present you with fact after fact, after fact that your thinking about asynchronous programming is completely wrong.

47
00:03:29,000 --> 00:03:32,300
But why bother when you equate technology to rock bands,

48
00:03:32,330 --> 00:03:38,200
fancy yourself a software hipster by wearing your node T-shirt and celebrate horrible code?

49
00:03:38,300 --> 00:03:42,100
Maybe you were cool, hell, maybe you have groupies,

50
00:03:42,200 --> 00:03:45,400
but when it comes to knowing what the fuck you are talking about

51
00:03:45,500 --> 00:03:50,300
you have all of the facilities of a parrot that says, "non-blocking" over and over again.

52
00:03:50,800 --> 00:03:57,700
Non-blocking is the secret in the async sauce. With it, you go fast, without it you go slow.

53
00:03:58,000 --> 00:04:01,200
Do you know when humans discovered when the world is round?

54
00:04:01,500 --> 00:04:04,800
1492, Columbus sailed the ocean blue.

55
00:04:04,900 --> 00:04:10,100
It was 240 B.C. by a Greek mathematician named Eratosthenes.

56
00:04:10,200 --> 00:04:15,100
He conducted a simple experiment using the length of shadows and the distance between cities

57
00:04:15,200 --> 00:04:19,700
to not only prove the earth is round, but also calculate its circumference.

58
00:04:19,800 --> 00:04:21,500
Sounds low tech.

59
00:04:21,600 --> 00:04:23,160
It was utterly brilliant.

60
00:04:23,260 --> 00:04:28,700
But somehow for one and a half millennia it was common knowledge that the world was flat.

61
00:04:28,800 --> 00:04:31,900
Hundreds and hundreds and hundreds of years of raft ignorance.

62
00:04:32,000 --> 00:04:34,800
How in motherfucking hell does this happen?

63
00:04:36,650 --> 00:04:37,800
It was you.

64
00:04:37,900 --> 00:04:41,400
You, who make claims about thread performance without measuring.

65
00:04:41,500 --> 00:04:45,850
You, who claim hacking your code with a machete turning it inside out

66
00:04:45,900 --> 00:04:49,800
into a twisted unrecognizable mess will somehow make it go faster.

67
00:04:49,900 --> 00:04:57,200
You, who spent your time alternating between problems that are already solved and problems that don't actually exist.

68
00:04:57,300 --> 00:05:00,800
You are the reason science was set back a thousand years.

69
00:05:00,900 --> 00:05:03,300
The reason we have not cured cancer,

70
00:05:03,400 --> 00:05:06,120
the reason we have not solved world hunger.

71
00:05:06,800 --> 00:05:11,700
It's because of you, mother fucker, that we are not all using Lisp.

72
00:05:11,800 --> 00:05:14,700
I'm sorry what was that last part again?

73
00:05:14,800 --> 00:05:15,400
Never mind.

74
00:05:15,450 --> 00:05:16,750
Did you just say "Lisp"?

75
00:05:16,800 --> 00:05:17,800
You misheard me.

76
00:05:17,850 --> 00:05:19,450
I could have sworn you just said "Lisp".

77
00:05:19,550 --> 00:05:23,200
If there are no other questions this concludes my presentation.

